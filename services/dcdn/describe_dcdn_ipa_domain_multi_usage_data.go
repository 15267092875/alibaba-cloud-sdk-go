package dcdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeDcdnIpaDomainMultiUsageData invokes the dcdn.DescribeDcdnIpaDomainMultiUsageData API synchronously
func (client *Client) DescribeDcdnIpaDomainMultiUsageData(request *DescribeDcdnIpaDomainMultiUsageDataRequest) (response *DescribeDcdnIpaDomainMultiUsageDataResponse, err error) {
	response = CreateDescribeDcdnIpaDomainMultiUsageDataResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeDcdnIpaDomainMultiUsageDataWithChan invokes the dcdn.DescribeDcdnIpaDomainMultiUsageData API asynchronously
func (client *Client) DescribeDcdnIpaDomainMultiUsageDataWithChan(request *DescribeDcdnIpaDomainMultiUsageDataRequest) (<-chan *DescribeDcdnIpaDomainMultiUsageDataResponse, <-chan error) {
	responseChan := make(chan *DescribeDcdnIpaDomainMultiUsageDataResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDcdnIpaDomainMultiUsageData(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeDcdnIpaDomainMultiUsageDataWithCallback invokes the dcdn.DescribeDcdnIpaDomainMultiUsageData API asynchronously
func (client *Client) DescribeDcdnIpaDomainMultiUsageDataWithCallback(request *DescribeDcdnIpaDomainMultiUsageDataRequest, callback func(response *DescribeDcdnIpaDomainMultiUsageDataResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDcdnIpaDomainMultiUsageDataResponse
		var err error
		defer close(result)
		response, err = client.DescribeDcdnIpaDomainMultiUsageData(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeDcdnIpaDomainMultiUsageDataRequest is the request struct for api DescribeDcdnIpaDomainMultiUsageData
type DescribeDcdnIpaDomainMultiUsageDataRequest struct {
	*requests.RpcRequest
	StartTime  string           `position:"Query" name:"StartTime"`
	DomainName string           `position:"Query" name:"DomainName"`
	EndTime    string           `position:"Query" name:"EndTime"`
	OwnerId    requests.Integer `position:"Query" name:"OwnerId"`
}

// DescribeDcdnIpaDomainMultiUsageDataResponse is the response struct for api DescribeDcdnIpaDomainMultiUsageData
type DescribeDcdnIpaDomainMultiUsageDataResponse struct {
	*responses.BaseResponse
	EndTime            string                                                  `json:"EndTime" xml:"EndTime"`
	StartTime          string                                                  `json:"StartTime" xml:"StartTime"`
	RequestId          string                                                  `json:"RequestId" xml:"RequestId"`
	TrafficPerInterval TrafficPerIntervalInDescribeDcdnIpaDomainMultiUsageData `json:"TrafficPerInterval" xml:"TrafficPerInterval"`
}

// CreateDescribeDcdnIpaDomainMultiUsageDataRequest creates a request to invoke DescribeDcdnIpaDomainMultiUsageData API
func CreateDescribeDcdnIpaDomainMultiUsageDataRequest() (request *DescribeDcdnIpaDomainMultiUsageDataRequest) {
	request = &DescribeDcdnIpaDomainMultiUsageDataRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("dcdn", "2018-01-15", "DescribeDcdnIpaDomainMultiUsageData", "", "")
	request.Method = requests.POST
	return
}

// CreateDescribeDcdnIpaDomainMultiUsageDataResponse creates a response to parse from DescribeDcdnIpaDomainMultiUsageData response
func CreateDescribeDcdnIpaDomainMultiUsageDataResponse() (response *DescribeDcdnIpaDomainMultiUsageDataResponse) {
	response = &DescribeDcdnIpaDomainMultiUsageDataResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
