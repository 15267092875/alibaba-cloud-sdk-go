package rtc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateRecordIndexFile invokes the rtc.CreateRecordIndexFile API synchronously
func (client *Client) CreateRecordIndexFile(request *CreateRecordIndexFileRequest) (response *CreateRecordIndexFileResponse, err error) {
	response = CreateCreateRecordIndexFileResponse()
	err = client.DoAction(request, response)
	return
}

// CreateRecordIndexFileWithChan invokes the rtc.CreateRecordIndexFile API asynchronously
func (client *Client) CreateRecordIndexFileWithChan(request *CreateRecordIndexFileRequest) (<-chan *CreateRecordIndexFileResponse, <-chan error) {
	responseChan := make(chan *CreateRecordIndexFileResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateRecordIndexFile(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateRecordIndexFileWithCallback invokes the rtc.CreateRecordIndexFile API asynchronously
func (client *Client) CreateRecordIndexFileWithCallback(request *CreateRecordIndexFileRequest, callback func(response *CreateRecordIndexFileResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateRecordIndexFileResponse
		var err error
		defer close(result)
		response, err = client.CreateRecordIndexFile(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateRecordIndexFileRequest is the request struct for api CreateRecordIndexFile
type CreateRecordIndexFileRequest struct {
	*requests.RpcRequest
	OssEndpoint string           `position:"Query" name:"OssEndpoint"`
	StartTime   string           `position:"Query" name:"StartTime"`
	OssObject   string           `position:"Query" name:"OssObject"`
	TaskId      string           `position:"Query" name:"TaskId"`
	ShowLog     string           `position:"Query" name:"ShowLog"`
	OssBucket   string           `position:"Query" name:"OssBucket"`
	EndTime     string           `position:"Query" name:"EndTime"`
	OwnerId     requests.Integer `position:"Query" name:"OwnerId"`
	AppId       string           `position:"Query" name:"AppId"`
	ChannelId   string           `position:"Query" name:"ChannelId"`
}

// CreateRecordIndexFileResponse is the response struct for api CreateRecordIndexFile
type CreateRecordIndexFileResponse struct {
	*responses.BaseResponse
	Url       string  `json:"Url" xml:"Url"`
	Duration  float64 `json:"Duration" xml:"Duration"`
	RequestId string  `json:"RequestId" xml:"RequestId"`
	Width     int     `json:"Width" xml:"Width"`
	Height    int     `json:"Height" xml:"Height"`
}

// CreateCreateRecordIndexFileRequest creates a request to invoke CreateRecordIndexFile API
func CreateCreateRecordIndexFileRequest() (request *CreateRecordIndexFileRequest) {
	request = &CreateRecordIndexFileRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("rtc", "2018-01-11", "CreateRecordIndexFile", "", "")
	request.Method = requests.POST
	return
}

// CreateCreateRecordIndexFileResponse creates a response to parse from CreateRecordIndexFile response
func CreateCreateRecordIndexFileResponse() (response *CreateRecordIndexFileResponse) {
	response = &CreateRecordIndexFileResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
