package cas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateCertificateRequest invokes the cas.CreateCertificateRequest API synchronously
// api document: https://help.aliyun.com/api/cas/createcertificaterequest.html
func (client *Client) CreateCertificateRequest(request *CreateCertificateRequestRequest) (response *CreateCertificateRequestResponse, err error) {
	response = CreateCreateCertificateRequestResponse()
	err = client.DoAction(request, response)
	return
}

// CreateCertificateRequestWithChan invokes the cas.CreateCertificateRequest API asynchronously
// api document: https://help.aliyun.com/api/cas/createcertificaterequest.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateCertificateRequestWithChan(request *CreateCertificateRequestRequest) (<-chan *CreateCertificateRequestResponse, <-chan error) {
	responseChan := make(chan *CreateCertificateRequestResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateCertificateRequest(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateCertificateRequestWithCallback invokes the cas.CreateCertificateRequest API asynchronously
// api document: https://help.aliyun.com/api/cas/createcertificaterequest.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateCertificateRequestWithCallback(request *CreateCertificateRequestRequest, callback func(response *CreateCertificateRequestResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateCertificateRequestResponse
		var err error
		defer close(result)
		response, err = client.CreateCertificateRequest(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateCertificateRequestRequest is the request struct for api CreateCertificateRequest
type CreateCertificateRequestRequest struct {
	*requests.RpcRequest
	ProductCode  string `position:"Query" name:"ProductCode"`
	ValidateType string `position:"Query" name:"ValidateType"`
	SourceIp     string `position:"Query" name:"SourceIp"`
	Email        string `position:"Query" name:"Email"`
	Phone        string `position:"Query" name:"Phone"`
	Domain       string `position:"Query" name:"Domain"`
	Username     string `position:"Query" name:"Username"`
}

// CreateCertificateRequestResponse is the response struct for api CreateCertificateRequest
type CreateCertificateRequestResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	OrderId   int64  `json:"OrderId" xml:"OrderId"`
}

// CreateCreateCertificateRequestRequest creates a request to invoke CreateCertificateRequest API
func CreateCreateCertificateRequestRequest() (request *CreateCertificateRequestRequest) {
	request = &CreateCertificateRequestRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cas", "2020-04-07", "CreateCertificateRequest", "cas-pack", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateCertificateRequestResponse creates a response to parse from CreateCertificateRequest response
func CreateCreateCertificateRequestResponse() (response *CreateCertificateRequestResponse) {
	response = &CreateCertificateRequestResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
