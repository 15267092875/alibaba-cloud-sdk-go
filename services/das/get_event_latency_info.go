package das

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetEventLatencyInfo invokes the das.GetEventLatencyInfo API synchronously
func (client *Client) GetEventLatencyInfo(request *GetEventLatencyInfoRequest) (response *GetEventLatencyInfoResponse, err error) {
	response = CreateGetEventLatencyInfoResponse()
	err = client.DoAction(request, response)
	return
}

// GetEventLatencyInfoWithChan invokes the das.GetEventLatencyInfo API asynchronously
func (client *Client) GetEventLatencyInfoWithChan(request *GetEventLatencyInfoRequest) (<-chan *GetEventLatencyInfoResponse, <-chan error) {
	responseChan := make(chan *GetEventLatencyInfoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetEventLatencyInfo(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetEventLatencyInfoWithCallback invokes the das.GetEventLatencyInfo API asynchronously
func (client *Client) GetEventLatencyInfoWithCallback(request *GetEventLatencyInfoRequest, callback func(response *GetEventLatencyInfoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetEventLatencyInfoResponse
		var err error
		defer close(result)
		response, err = client.GetEventLatencyInfo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetEventLatencyInfoRequest is the request struct for api GetEventLatencyInfo
type GetEventLatencyInfoRequest struct {
	*requests.RpcRequest
	EndTime        string `position:"Query" name:"EndTime"`
	StartTime      string `position:"Query" name:"StartTime"`
	ConsoleContext string `position:"Query" name:"ConsoleContext"`
	InstanceId     string `position:"Query" name:"InstanceId"`
	NodeId         string `position:"Query" name:"NodeId"`
}

// GetEventLatencyInfoResponse is the response struct for api GetEventLatencyInfo
type GetEventLatencyInfoResponse struct {
	*responses.BaseResponse
	Code      string                 `json:"Code" xml:"Code"`
	Message   string                 `json:"Message" xml:"Message"`
	Data      map[string]interface{} `json:"Data" xml:"Data"`
	RequestId string                 `json:"RequestId" xml:"RequestId"`
	Success   string                 `json:"Success" xml:"Success"`
}

// CreateGetEventLatencyInfoRequest creates a request to invoke GetEventLatencyInfo API
func CreateGetEventLatencyInfoRequest() (request *GetEventLatencyInfoRequest) {
	request = &GetEventLatencyInfoRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("DAS", "2020-01-16", "GetEventLatencyInfo", "", "")
	request.Method = requests.POST
	return
}

// CreateGetEventLatencyInfoResponse creates a response to parse from GetEventLatencyInfo response
func CreateGetEventLatencyInfoResponse() (response *GetEventLatencyInfoResponse) {
	response = &GetEventLatencyInfoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
