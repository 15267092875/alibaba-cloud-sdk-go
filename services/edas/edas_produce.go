package edas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// EdasProduce invokes the edas.EdasProduce API synchronously
func (client *Client) EdasProduce(request *EdasProduceRequest) (response *EdasProduceResponse, err error) {
	response = CreateEdasProduceResponse()
	err = client.DoAction(request, response)
	return
}

// EdasProduceWithChan invokes the edas.EdasProduce API asynchronously
func (client *Client) EdasProduceWithChan(request *EdasProduceRequest) (<-chan *EdasProduceResponse, <-chan error) {
	responseChan := make(chan *EdasProduceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.EdasProduce(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// EdasProduceWithCallback invokes the edas.EdasProduce API asynchronously
func (client *Client) EdasProduceWithCallback(request *EdasProduceRequest, callback func(response *EdasProduceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *EdasProduceResponse
		var err error
		defer close(result)
		response, err = client.EdasProduce(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// EdasProduceRequest is the request struct for api EdasProduce
type EdasProduceRequest struct {
	*requests.RpcRequest
	Data string `position:"Query" name:"data"`
}

// EdasProduceResponse is the response struct for api EdasProduce
type EdasProduceResponse struct {
	*responses.BaseResponse
	Code    string `json:"code" xml:"code"`
	Success bool   `json:"success" xml:"success"`
	Message string `json:"message" xml:"message"`
	Synchro bool   `json:"synchro" xml:"synchro"`
}

// CreateEdasProduceRequest creates a request to invoke EdasProduce API
func CreateEdasProduceRequest() (request *EdasProduceRequest) {
	request = &EdasProduceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Edas", "2018-01-31", "EdasProduce", "edas", "openAPI")
	request.Method = requests.POST
	return
}

// CreateEdasProduceResponse creates a response to parse from EdasProduce response
func CreateEdasProduceResponse() (response *EdasProduceResponse) {
	response = &EdasProduceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
