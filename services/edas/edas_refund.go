package edas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// EdasRefund invokes the edas.EdasRefund API synchronously
func (client *Client) EdasRefund(request *EdasRefundRequest) (response *EdasRefundResponse, err error) {
	response = CreateEdasRefundResponse()
	err = client.DoAction(request, response)
	return
}

// EdasRefundWithChan invokes the edas.EdasRefund API asynchronously
func (client *Client) EdasRefundWithChan(request *EdasRefundRequest) (<-chan *EdasRefundResponse, <-chan error) {
	responseChan := make(chan *EdasRefundResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.EdasRefund(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// EdasRefundWithCallback invokes the edas.EdasRefund API asynchronously
func (client *Client) EdasRefundWithCallback(request *EdasRefundRequest, callback func(response *EdasRefundResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *EdasRefundResponse
		var err error
		defer close(result)
		response, err = client.EdasRefund(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// EdasRefundRequest is the request struct for api EdasRefund
type EdasRefundRequest struct {
	*requests.RpcRequest
	Data string `position:"Query" name:"data"`
}

// EdasRefundResponse is the response struct for api EdasRefund
type EdasRefundResponse struct {
	*responses.BaseResponse
	Code      string `json:"code" xml:"code"`
	Success   bool   `json:"success" xml:"success"`
	Message   string `json:"message" xml:"message"`
	Data      string `json:"data" xml:"data"`
	RequestId string `json:"requestId" xml:"requestId"`
}

// CreateEdasRefundRequest creates a request to invoke EdasRefund API
func CreateEdasRefundRequest() (request *EdasRefundRequest) {
	request = &EdasRefundRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Edas", "2018-01-31", "EdasRefund", "edas", "openAPI")
	request.Method = requests.POST
	return
}

// CreateEdasRefundResponse creates a response to parse from EdasRefund response
func CreateEdasRefundResponse() (response *EdasRefundResponse) {
	response = &EdasRefundResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
