package mse

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// AddSeataServer invokes the mse.AddSeataServer API synchronously
func (client *Client) AddSeataServer(request *AddSeataServerRequest) (response *AddSeataServerResponse, err error) {
	response = CreateAddSeataServerResponse()
	err = client.DoAction(request, response)
	return
}

// AddSeataServerWithChan invokes the mse.AddSeataServer API asynchronously
func (client *Client) AddSeataServerWithChan(request *AddSeataServerRequest) (<-chan *AddSeataServerResponse, <-chan error) {
	responseChan := make(chan *AddSeataServerResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.AddSeataServer(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// AddSeataServerWithCallback invokes the mse.AddSeataServer API asynchronously
func (client *Client) AddSeataServerWithCallback(request *AddSeataServerRequest, callback func(response *AddSeataServerResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *AddSeataServerResponse
		var err error
		defer close(result)
		response, err = client.AddSeataServer(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// AddSeataServerRequest is the request struct for api AddSeataServer
type AddSeataServerRequest struct {
	*requests.RpcRequest
	Replica        requests.Integer `position:"Query" name:"Replica"`
	PrimaryUser    string           `position:"Query" name:"PrimaryUser"`
	Vpc            string           `position:"Query" name:"Vpc"`
	Vswitch        string           `position:"Query" name:"Vswitch"`
	Name           string           `position:"Query" name:"Name"`
	AcceptLanguage string           `position:"Query" name:"AcceptLanguage"`
	ZoneId         string           `position:"Query" name:"ZoneId"`
	Region         string           `position:"Query" name:"Region"`
}

// AddSeataServerResponse is the response struct for api AddSeataServer
type AddSeataServerResponse struct {
	*responses.BaseResponse
	RequestId      string `json:"RequestId" xml:"RequestId"`
	HttpStatusCode int    `json:"HttpStatusCode" xml:"HttpStatusCode"`
	Message        string `json:"Message" xml:"Message"`
	Code           int    `json:"Code" xml:"Code"`
	Success        bool   `json:"Success" xml:"Success"`
	Data           string `json:"Data" xml:"Data"`
}

// CreateAddSeataServerRequest creates a request to invoke AddSeataServer API
func CreateAddSeataServerRequest() (request *AddSeataServerRequest) {
	request = &AddSeataServerRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("mse", "2019-05-31", "AddSeataServer", "mse", "openAPI")
	request.Method = requests.POST
	return
}

// CreateAddSeataServerResponse creates a response to parse from AddSeataServer response
func CreateAddSeataServerResponse() (response *AddSeataServerResponse) {
	response = &AddSeataServerResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
