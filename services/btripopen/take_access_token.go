package btripopen

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// TakeAccessToken invokes the btripopen.TakeAccessToken API synchronously
func (client *Client) TakeAccessToken(request *TakeAccessTokenRequest) (response *TakeAccessTokenResponse, err error) {
	response = CreateTakeAccessTokenResponse()
	err = client.DoAction(request, response)
	return
}

// TakeAccessTokenWithChan invokes the btripopen.TakeAccessToken API asynchronously
func (client *Client) TakeAccessTokenWithChan(request *TakeAccessTokenRequest) (<-chan *TakeAccessTokenResponse, <-chan error) {
	responseChan := make(chan *TakeAccessTokenResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.TakeAccessToken(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// TakeAccessTokenWithCallback invokes the btripopen.TakeAccessToken API asynchronously
func (client *Client) TakeAccessTokenWithCallback(request *TakeAccessTokenRequest, callback func(response *TakeAccessTokenResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *TakeAccessTokenResponse
		var err error
		defer close(result)
		response, err = client.TakeAccessToken(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// TakeAccessTokenRequest is the request struct for api TakeAccessToken
type TakeAccessTokenRequest struct {
	*requests.RoaRequest
	AppKey    string `position:"Query" name:"app_key"`
	AppSecret string `position:"Query" name:"app_secret"`
}

// TakeAccessTokenResponse is the response struct for api TakeAccessToken
type TakeAccessTokenResponse struct {
	*responses.BaseResponse
	RequestId string `json:"requestId" xml:"requestId"`
	Code      string `json:"code" xml:"code"`
	Message   string `json:"message" xml:"message"`
	Success   string `json:"success" xml:"success"`
	Data      Data   `json:"data" xml:"data"`
}

// CreateTakeAccessTokenRequest creates a request to invoke TakeAccessToken API
func CreateTakeAccessTokenRequest() (request *TakeAccessTokenRequest) {
	request = &TakeAccessTokenRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("btripOpen", "2022-05-17", "TakeAccessToken", "/btrip/open/access-token/take", "", "")
	request.Method = requests.GET
	return
}

// CreateTakeAccessTokenResponse creates a response to parse from TakeAccessToken response
func CreateTakeAccessTokenResponse() (response *TakeAccessTokenResponse) {
	response = &TakeAccessTokenResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
