package iot

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// PushSpeechModelToDevice invokes the iot.PushSpeechModelToDevice API synchronously
func (client *Client) PushSpeechModelToDevice(request *PushSpeechModelToDeviceRequest) (response *PushSpeechModelToDeviceResponse, err error) {
	response = CreatePushSpeechModelToDeviceResponse()
	err = client.DoAction(request, response)
	return
}

// PushSpeechModelToDeviceWithChan invokes the iot.PushSpeechModelToDevice API asynchronously
func (client *Client) PushSpeechModelToDeviceWithChan(request *PushSpeechModelToDeviceRequest) (<-chan *PushSpeechModelToDeviceResponse, <-chan error) {
	responseChan := make(chan *PushSpeechModelToDeviceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PushSpeechModelToDevice(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// PushSpeechModelToDeviceWithCallback invokes the iot.PushSpeechModelToDevice API asynchronously
func (client *Client) PushSpeechModelToDeviceWithCallback(request *PushSpeechModelToDeviceRequest, callback func(response *PushSpeechModelToDeviceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PushSpeechModelToDeviceResponse
		var err error
		defer close(result)
		response, err = client.PushSpeechModelToDevice(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// PushSpeechModelToDeviceRequest is the request struct for api PushSpeechModelToDevice
type PushSpeechModelToDeviceRequest struct {
	*requests.RpcRequest
	ProjectCode         string    `position:"Body" name:"ProjectCode"`
	IotId               string    `position:"Body" name:"IotId"`
	PushMode            string    `position:"Body" name:"PushMode"`
	ApiProduct          string    `position:"Body" name:"ApiProduct"`
	ApiRevision         string    `position:"Body" name:"ApiRevision"`
	SpeechModelCodeList *[]string `position:"Body" name:"SpeechModelCodeList"  type:"Repeated"`
}

// PushSpeechModelToDeviceResponse is the response struct for api PushSpeechModelToDevice
type PushSpeechModelToDeviceResponse struct {
	*responses.BaseResponse
	RequestId    string `json:"RequestId" xml:"RequestId"`
	Success      bool   `json:"Success" xml:"Success"`
	Code         string `json:"Code" xml:"Code"`
	ErrorMessage string `json:"ErrorMessage" xml:"ErrorMessage"`
	Data         string `json:"Data" xml:"Data"`
}

// CreatePushSpeechModelToDeviceRequest creates a request to invoke PushSpeechModelToDevice API
func CreatePushSpeechModelToDeviceRequest() (request *PushSpeechModelToDeviceRequest) {
	request = &PushSpeechModelToDeviceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Iot", "2018-01-20", "PushSpeechModelToDevice", "iot", "openAPI")
	request.Method = requests.POST
	return
}

// CreatePushSpeechModelToDeviceResponse creates a response to parse from PushSpeechModelToDevice response
func CreatePushSpeechModelToDeviceResponse() (response *PushSpeechModelToDeviceResponse) {
	response = &PushSpeechModelToDeviceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
