package dts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeChannelAccount invokes the dts.DescribeChannelAccount API synchronously
func (client *Client) DescribeChannelAccount(request *DescribeChannelAccountRequest) (response *DescribeChannelAccountResponse, err error) {
	response = CreateDescribeChannelAccountResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeChannelAccountWithChan invokes the dts.DescribeChannelAccount API asynchronously
func (client *Client) DescribeChannelAccountWithChan(request *DescribeChannelAccountRequest) (<-chan *DescribeChannelAccountResponse, <-chan error) {
	responseChan := make(chan *DescribeChannelAccountResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeChannelAccount(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeChannelAccountWithCallback invokes the dts.DescribeChannelAccount API asynchronously
func (client *Client) DescribeChannelAccountWithCallback(request *DescribeChannelAccountRequest, callback func(response *DescribeChannelAccountResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeChannelAccountResponse
		var err error
		defer close(result)
		response, err = client.DescribeChannelAccount(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeChannelAccountRequest is the request struct for api DescribeChannelAccount
type DescribeChannelAccountRequest struct {
	*requests.RpcRequest
	Type            string `position:"Query" name:"Type"`
	ResourceGroupId string `position:"Query" name:"ResourceGroupId"`
	DtsJobId        string `position:"Query" name:"DtsJobId"`
	OriginType      string `position:"Query" name:"OriginType"`
	OwnerId         string `position:"Query" name:"OwnerId"`
	Tags            string `position:"Query" name:"Tags"`
	Region          string `position:"Query" name:"Region"`
}

// DescribeChannelAccountResponse is the response struct for api DescribeChannelAccount
type DescribeChannelAccountResponse struct {
	*responses.BaseResponse
	HttpStatusCode int    `json:"HttpStatusCode" xml:"HttpStatusCode"`
	RequestId      string `json:"RequestId" xml:"RequestId"`
	ErrCode        string `json:"ErrCode" xml:"ErrCode"`
	Success        bool   `json:"Success" xml:"Success"`
	ErrMessage     string `json:"ErrMessage" xml:"ErrMessage"`
	DynamicMessage string `json:"DynamicMessage" xml:"DynamicMessage"`
	DynamicCode    string `json:"DynamicCode" xml:"DynamicCode"`
	Username       string `json:"Username" xml:"Username"`
	Password       string `json:"Password" xml:"Password"`
}

// CreateDescribeChannelAccountRequest creates a request to invoke DescribeChannelAccount API
func CreateDescribeChannelAccountRequest() (request *DescribeChannelAccountRequest) {
	request = &DescribeChannelAccountRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dts", "2020-01-01", "DescribeChannelAccount", "dts", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeChannelAccountResponse creates a response to parse from DescribeChannelAccount response
func CreateDescribeChannelAccountResponse() (response *DescribeChannelAccountResponse) {
	response = &DescribeChannelAccountResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
