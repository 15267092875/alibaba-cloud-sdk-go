package dts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeDtsJobLogs invokes the dts.DescribeDtsJobLogs API synchronously
func (client *Client) DescribeDtsJobLogs(request *DescribeDtsJobLogsRequest) (response *DescribeDtsJobLogsResponse, err error) {
	response = CreateDescribeDtsJobLogsResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeDtsJobLogsWithChan invokes the dts.DescribeDtsJobLogs API asynchronously
func (client *Client) DescribeDtsJobLogsWithChan(request *DescribeDtsJobLogsRequest) (<-chan *DescribeDtsJobLogsResponse, <-chan error) {
	responseChan := make(chan *DescribeDtsJobLogsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDtsJobLogs(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeDtsJobLogsWithCallback invokes the dts.DescribeDtsJobLogs API asynchronously
func (client *Client) DescribeDtsJobLogsWithCallback(request *DescribeDtsJobLogsRequest, callback func(response *DescribeDtsJobLogsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDtsJobLogsResponse
		var err error
		defer close(result)
		response, err = client.DescribeDtsJobLogs(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeDtsJobLogsRequest is the request struct for api DescribeDtsJobLogs
type DescribeDtsJobLogsRequest struct {
	*requests.RpcRequest
	EndTime    requests.Integer `position:"Query" name:"EndTime"`
	StartTime  requests.Integer `position:"Query" name:"StartTime"`
	Type       string           `position:"Query" name:"Type"`
	PageNumber requests.Integer `position:"Query" name:"PageNumber"`
	PageSize   requests.Integer `position:"Query" name:"PageSize"`
	DtsJobId   string           `position:"Query" name:"DtsJobId"`
	Status     string           `position:"Query" name:"Status"`
}

// DescribeDtsJobLogsResponse is the response struct for api DescribeDtsJobLogs
type DescribeDtsJobLogsResponse struct {
	*responses.BaseResponse
	DynamicCode      string          `json:"DynamicCode" xml:"DynamicCode"`
	DynamicMessage   string          `json:"DynamicMessage" xml:"DynamicMessage"`
	ErrCode          string          `json:"ErrCode" xml:"ErrCode"`
	ErrMessage       string          `json:"ErrMessage" xml:"ErrMessage"`
	HttpStatusCode   int             `json:"HttpStatusCode" xml:"HttpStatusCode"`
	RequestId        string          `json:"RequestId" xml:"RequestId"`
	Success          bool            `json:"Success" xml:"Success"`
	PageNumber       int             `json:"PageNumber" xml:"PageNumber"`
	PageRecordCount  int             `json:"PageRecordCount" xml:"PageRecordCount"`
	TotalRecordCount int64           `json:"TotalRecordCount" xml:"TotalRecordCount"`
	JobRunningLogs   []JobRunningLog `json:"JobRunningLogs" xml:"JobRunningLogs"`
}

// CreateDescribeDtsJobLogsRequest creates a request to invoke DescribeDtsJobLogs API
func CreateDescribeDtsJobLogsRequest() (request *DescribeDtsJobLogsRequest) {
	request = &DescribeDtsJobLogsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dts", "2020-01-01", "DescribeDtsJobLogs", "dts", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeDtsJobLogsResponse creates a response to parse from DescribeDtsJobLogs response
func CreateDescribeDtsJobLogsResponse() (response *DescribeDtsJobLogsResponse) {
	response = &DescribeDtsJobLogsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
