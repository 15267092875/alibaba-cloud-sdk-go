package dts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeCenVpc invokes the dts.DescribeCenVpc API synchronously
func (client *Client) DescribeCenVpc(request *DescribeCenVpcRequest) (response *DescribeCenVpcResponse, err error) {
	response = CreateDescribeCenVpcResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeCenVpcWithChan invokes the dts.DescribeCenVpc API asynchronously
func (client *Client) DescribeCenVpcWithChan(request *DescribeCenVpcRequest) (<-chan *DescribeCenVpcResponse, <-chan error) {
	responseChan := make(chan *DescribeCenVpcResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeCenVpc(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeCenVpcWithCallback invokes the dts.DescribeCenVpc API asynchronously
func (client *Client) DescribeCenVpcWithCallback(request *DescribeCenVpcRequest, callback func(response *DescribeCenVpcResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeCenVpcResponse
		var err error
		defer close(result)
		response, err = client.DescribeCenVpc(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeCenVpcRequest is the request struct for api DescribeCenVpc
type DescribeCenVpcRequest struct {
	*requests.RpcRequest
	Type       string `position:"Query" name:"Type"`
	PageNumber string `position:"Query" name:"PageNumber"`
	Engine     string `position:"Query" name:"Engine"`
	PageSize   string `position:"Query" name:"PageSize"`
	RoleName   string `position:"Query" name:"RoleName"`
	Ip         string `position:"Query" name:"Ip"`
	AliyunId   string `position:"Query" name:"AliyunId"`
	InstanceId string `position:"Query" name:"InstanceId"`
	Port       string `position:"Query" name:"Port"`
	Region     string `position:"Query" name:"Region"`
}

// DescribeCenVpcResponse is the response struct for api DescribeCenVpc
type DescribeCenVpcResponse struct {
	*responses.BaseResponse
	DynamicCode    string       `json:"DynamicCode" xml:"DynamicCode"`
	DynamicMessage string       `json:"DynamicMessage" xml:"DynamicMessage"`
	ErrCode        string       `json:"ErrCode" xml:"ErrCode"`
	ErrMessage     string       `json:"ErrMessage" xml:"ErrMessage"`
	HttpStatusCode int          `json:"HttpStatusCode" xml:"HttpStatusCode"`
	RequestId      string       `json:"RequestId" xml:"RequestId"`
	Success        bool         `json:"Success" xml:"Success"`
	CenVpc         []CenVpcItem `json:"CenVpc" xml:"CenVpc"`
}

// CreateDescribeCenVpcRequest creates a request to invoke DescribeCenVpc API
func CreateDescribeCenVpcRequest() (request *DescribeCenVpcRequest) {
	request = &DescribeCenVpcRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dts", "2020-01-01", "DescribeCenVpc", "dts", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeCenVpcResponse creates a response to parse from DescribeCenVpc response
func CreateDescribeCenVpcResponse() (response *DescribeCenVpcResponse) {
	response = &DescribeCenVpcResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
