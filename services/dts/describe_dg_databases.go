package dts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeDgDatabases invokes the dts.DescribeDgDatabases API synchronously
func (client *Client) DescribeDgDatabases(request *DescribeDgDatabasesRequest) (response *DescribeDgDatabasesResponse, err error) {
	response = CreateDescribeDgDatabasesResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeDgDatabasesWithChan invokes the dts.DescribeDgDatabases API asynchronously
func (client *Client) DescribeDgDatabasesWithChan(request *DescribeDgDatabasesRequest) (<-chan *DescribeDgDatabasesResponse, <-chan error) {
	responseChan := make(chan *DescribeDgDatabasesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDgDatabases(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeDgDatabasesWithCallback invokes the dts.DescribeDgDatabases API asynchronously
func (client *Client) DescribeDgDatabasesWithCallback(request *DescribeDgDatabasesRequest, callback func(response *DescribeDgDatabasesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDgDatabasesResponse
		var err error
		defer close(result)
		response, err = client.DescribeDgDatabases(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeDgDatabasesRequest is the request struct for api DescribeDgDatabases
type DescribeDgDatabasesRequest struct {
	*requests.RpcRequest
	Type       string `position:"Query" name:"Type"`
	PageNumber string `position:"Query" name:"PageNumber"`
	Engine     string `position:"Query" name:"Engine"`
	PageSize   string `position:"Query" name:"PageSize"`
	RoleName   string `position:"Query" name:"RoleName"`
	Ip         string `position:"Query" name:"Ip"`
	AliyunId   string `position:"Query" name:"AliyunId"`
	InstanceId string `position:"Query" name:"InstanceId"`
	Port       string `position:"Query" name:"Port"`
	Region     string `position:"Query" name:"Region"`
}

// DescribeDgDatabasesResponse is the response struct for api DescribeDgDatabases
type DescribeDgDatabasesResponse struct {
	*responses.BaseResponse
	RequestId      string            `json:"RequestId" xml:"RequestId"`
	Success        bool              `json:"Success" xml:"Success"`
	ErrCode        string            `json:"ErrCode" xml:"ErrCode"`
	ErrMessage     string            `json:"ErrMessage" xml:"ErrMessage"`
	DynamicCode    string            `json:"DynamicCode" xml:"DynamicCode"`
	DynamicMessage string            `json:"DynamicMessage" xml:"DynamicMessage"`
	HttpStatusCode int               `json:"HttpStatusCode" xml:"HttpStatusCode"`
	DgDatabases    []DgDatabasesItem `json:"DgDatabases" xml:"DgDatabases"`
}

// CreateDescribeDgDatabasesRequest creates a request to invoke DescribeDgDatabases API
func CreateDescribeDgDatabasesRequest() (request *DescribeDgDatabasesRequest) {
	request = &DescribeDgDatabasesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dts", "2020-01-01", "DescribeDgDatabases", "dts", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeDgDatabasesResponse creates a response to parse from DescribeDgDatabases response
func CreateDescribeDgDatabasesResponse() (response *DescribeDgDatabasesResponse) {
	response = &DescribeDgDatabasesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
