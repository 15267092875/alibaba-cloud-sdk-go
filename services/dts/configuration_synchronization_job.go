package dts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ConfigurationSynchronizationJob invokes the dts.ConfigurationSynchronizationJob API synchronously
func (client *Client) ConfigurationSynchronizationJob(request *ConfigurationSynchronizationJobRequest) (response *ConfigurationSynchronizationJobResponse, err error) {
	response = CreateConfigurationSynchronizationJobResponse()
	err = client.DoAction(request, response)
	return
}

// ConfigurationSynchronizationJobWithChan invokes the dts.ConfigurationSynchronizationJob API asynchronously
func (client *Client) ConfigurationSynchronizationJobWithChan(request *ConfigurationSynchronizationJobRequest) (<-chan *ConfigurationSynchronizationJobResponse, <-chan error) {
	responseChan := make(chan *ConfigurationSynchronizationJobResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ConfigurationSynchronizationJob(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ConfigurationSynchronizationJobWithCallback invokes the dts.ConfigurationSynchronizationJob API asynchronously
func (client *Client) ConfigurationSynchronizationJobWithCallback(request *ConfigurationSynchronizationJobRequest, callback func(response *ConfigurationSynchronizationJobResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ConfigurationSynchronizationJobResponse
		var err error
		defer close(result)
		response, err = client.ConfigurationSynchronizationJob(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ConfigurationSynchronizationJobRequest is the request struct for api ConfigurationSynchronizationJob
type ConfigurationSynchronizationJobRequest struct {
	*requests.RpcRequest
	SourceEndpointInstanceID        string           `position:"Query" name:"SourceEndpoint.InstanceID"`
	DestinationEndpointInstanceID   string           `position:"Query" name:"DestinationEndpoint.InstanceID"`
	InitializationStructureLoad     requests.Boolean `position:"Query" name:"Initialization.StructureLoad"`
	SynchronizationObject           string           `position:"Query" name:"SynchronizationObject"`
	OwnerId                         string           `position:"Query" name:"OwnerId"`
	SourceEndpointInstanceType      string           `position:"Query" name:"SourceEndpoint.InstanceType"`
	SynchronizationJobId            string           `position:"Query" name:"SynchronizationJobId"`
	SynchronizationJobName          string           `position:"Query" name:"SynchronizationJobName"`
	InitializationDataLoad          requests.Boolean `position:"Query" name:"Initialization.DataLoad"`
	DestinationEndpointInstanceType string           `position:"Query" name:"DestinationEndpoint.InstanceType"`
}

// ConfigurationSynchronizationJobResponse is the response struct for api ConfigurationSynchronizationJob
type ConfigurationSynchronizationJobResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	ErrCode    string `json:"ErrCode" xml:"ErrCode"`
	Success    string `json:"Success" xml:"Success"`
	ErrMessage string `json:"ErrMessage" xml:"ErrMessage"`
}

// CreateConfigurationSynchronizationJobRequest creates a request to invoke ConfigurationSynchronizationJob API
func CreateConfigurationSynchronizationJobRequest() (request *ConfigurationSynchronizationJobRequest) {
	request = &ConfigurationSynchronizationJobRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dts", "2016-08-01", "ConfigurationSynchronizationJob", "dts", "openAPI")
	request.Method = requests.POST
	return
}

// CreateConfigurationSynchronizationJobResponse creates a response to parse from ConfigurationSynchronizationJob response
func CreateConfigurationSynchronizationJobResponse() (response *ConfigurationSynchronizationJobResponse) {
	response = &ConfigurationSynchronizationJobResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
