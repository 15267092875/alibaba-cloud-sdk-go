package dts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ReverseTwoWayDirection invokes the dts.ReverseTwoWayDirection API synchronously
func (client *Client) ReverseTwoWayDirection(request *ReverseTwoWayDirectionRequest) (response *ReverseTwoWayDirectionResponse, err error) {
	response = CreateReverseTwoWayDirectionResponse()
	err = client.DoAction(request, response)
	return
}

// ReverseTwoWayDirectionWithChan invokes the dts.ReverseTwoWayDirection API asynchronously
func (client *Client) ReverseTwoWayDirectionWithChan(request *ReverseTwoWayDirectionRequest) (<-chan *ReverseTwoWayDirectionResponse, <-chan error) {
	responseChan := make(chan *ReverseTwoWayDirectionResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ReverseTwoWayDirection(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ReverseTwoWayDirectionWithCallback invokes the dts.ReverseTwoWayDirection API asynchronously
func (client *Client) ReverseTwoWayDirectionWithCallback(request *ReverseTwoWayDirectionRequest, callback func(response *ReverseTwoWayDirectionResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ReverseTwoWayDirectionResponse
		var err error
		defer close(result)
		response, err = client.ReverseTwoWayDirection(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ReverseTwoWayDirectionRequest is the request struct for api ReverseTwoWayDirection
type ReverseTwoWayDirectionRequest struct {
	*requests.RpcRequest
	IgnoreErrorSubJob requests.Boolean `position:"Query" name:"IgnoreErrorSubJob"`
	DtsInstanceId     string           `position:"Query" name:"DtsInstanceId"`
}

// ReverseTwoWayDirectionResponse is the response struct for api ReverseTwoWayDirection
type ReverseTwoWayDirectionResponse struct {
	*responses.BaseResponse
	HttpStatusCode int    `json:"HttpStatusCode" xml:"HttpStatusCode"`
	RequestId      string `json:"RequestId" xml:"RequestId"`
	ErrCode        string `json:"ErrCode" xml:"ErrCode"`
	Success        bool   `json:"Success" xml:"Success"`
	ErrMessage     string `json:"ErrMessage" xml:"ErrMessage"`
	Code           string `json:"Code" xml:"Code"`
	DynamicMessage string `json:"DynamicMessage" xml:"DynamicMessage"`
}

// CreateReverseTwoWayDirectionRequest creates a request to invoke ReverseTwoWayDirection API
func CreateReverseTwoWayDirectionRequest() (request *ReverseTwoWayDirectionRequest) {
	request = &ReverseTwoWayDirectionRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dts", "2020-01-01", "ReverseTwoWayDirection", "dts", "openAPI")
	request.Method = requests.POST
	return
}

// CreateReverseTwoWayDirectionResponse creates a response to parse from ReverseTwoWayDirection response
func CreateReverseTwoWayDirectionResponse() (response *ReverseTwoWayDirectionResponse) {
	response = &ReverseTwoWayDirectionResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
