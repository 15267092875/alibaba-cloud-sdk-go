package kms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// EncryptByWhiteBox invokes the kms.EncryptByWhiteBox API synchronously
func (client *Client) EncryptByWhiteBox(request *EncryptByWhiteBoxRequest) (response *EncryptByWhiteBoxResponse, err error) {
	response = CreateEncryptByWhiteBoxResponse()
	err = client.DoAction(request, response)
	return
}

// EncryptByWhiteBoxWithChan invokes the kms.EncryptByWhiteBox API asynchronously
func (client *Client) EncryptByWhiteBoxWithChan(request *EncryptByWhiteBoxRequest) (<-chan *EncryptByWhiteBoxResponse, <-chan error) {
	responseChan := make(chan *EncryptByWhiteBoxResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.EncryptByWhiteBox(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// EncryptByWhiteBoxWithCallback invokes the kms.EncryptByWhiteBox API asynchronously
func (client *Client) EncryptByWhiteBoxWithCallback(request *EncryptByWhiteBoxRequest, callback func(response *EncryptByWhiteBoxResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *EncryptByWhiteBoxResponse
		var err error
		defer close(result)
		response, err = client.EncryptByWhiteBox(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// EncryptByWhiteBoxRequest is the request struct for api EncryptByWhiteBox
type EncryptByWhiteBoxRequest struct {
	*requests.RpcRequest
	KeyId                string `position:"Query" name:"KeyId"`
	PlainText            string `position:"Query" name:"PlainText"`
	InitializationVector string `position:"Query" name:"InitializationVector"`
}

// EncryptByWhiteBoxResponse is the response struct for api EncryptByWhiteBox
type EncryptByWhiteBoxResponse struct {
	*responses.BaseResponse
	RequestId            string `json:"RequestId" xml:"RequestId"`
	InitializationVector string `json:"InitializationVector" xml:"InitializationVector"`
	CipherText           string `json:"CipherText" xml:"CipherText"`
}

// CreateEncryptByWhiteBoxRequest creates a request to invoke EncryptByWhiteBox API
func CreateEncryptByWhiteBoxRequest() (request *EncryptByWhiteBoxRequest) {
	request = &EncryptByWhiteBoxRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Kms", "2016-01-20", "EncryptByWhiteBox", "kms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateEncryptByWhiteBoxResponse creates a response to parse from EncryptByWhiteBox response
func CreateEncryptByWhiteBoxResponse() (response *EncryptByWhiteBoxResponse) {
	response = &EncryptByWhiteBoxResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
