package kms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// UpdateCertificateAuthority invokes the kms.UpdateCertificateAuthority API synchronously
func (client *Client) UpdateCertificateAuthority(request *UpdateCertificateAuthorityRequest) (response *UpdateCertificateAuthorityResponse, err error) {
	response = CreateUpdateCertificateAuthorityResponse()
	err = client.DoAction(request, response)
	return
}

// UpdateCertificateAuthorityWithChan invokes the kms.UpdateCertificateAuthority API asynchronously
func (client *Client) UpdateCertificateAuthorityWithChan(request *UpdateCertificateAuthorityRequest) (<-chan *UpdateCertificateAuthorityResponse, <-chan error) {
	responseChan := make(chan *UpdateCertificateAuthorityResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.UpdateCertificateAuthority(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// UpdateCertificateAuthorityWithCallback invokes the kms.UpdateCertificateAuthority API asynchronously
func (client *Client) UpdateCertificateAuthorityWithCallback(request *UpdateCertificateAuthorityRequest, callback func(response *UpdateCertificateAuthorityResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *UpdateCertificateAuthorityResponse
		var err error
		defer close(result)
		response, err = client.UpdateCertificateAuthority(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// UpdateCertificateAuthorityRequest is the request struct for api UpdateCertificateAuthority
type UpdateCertificateAuthorityRequest struct {
	*requests.RpcRequest
	CertificateAuthorityId  string                 `position:"Body" name:"CertificateAuthorityId"`
	RevocationConfiguration string                 `position:"Body" name:"RevocationConfiguration"`
	Status                  map[string]interface{} `position:"Body" name:"Status"`
}

// UpdateCertificateAuthorityResponse is the response struct for api UpdateCertificateAuthority
type UpdateCertificateAuthorityResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateUpdateCertificateAuthorityRequest creates a request to invoke UpdateCertificateAuthority API
func CreateUpdateCertificateAuthorityRequest() (request *UpdateCertificateAuthorityRequest) {
	request = &UpdateCertificateAuthorityRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Kms", "2016-01-20", "UpdateCertificateAuthority", "kms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateUpdateCertificateAuthorityResponse creates a response to parse from UpdateCertificateAuthority response
func CreateUpdateCertificateAuthorityResponse() (response *UpdateCertificateAuthorityResponse) {
	response = &UpdateCertificateAuthorityResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
