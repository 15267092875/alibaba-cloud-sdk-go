package kms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetCrl invokes the kms.GetCrl API synchronously
func (client *Client) GetCrl(request *GetCrlRequest) (response *GetCrlResponse, err error) {
	response = CreateGetCrlResponse()
	err = client.DoAction(request, response)
	return
}

// GetCrlWithChan invokes the kms.GetCrl API asynchronously
func (client *Client) GetCrlWithChan(request *GetCrlRequest) (<-chan *GetCrlResponse, <-chan error) {
	responseChan := make(chan *GetCrlResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetCrl(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetCrlWithCallback invokes the kms.GetCrl API asynchronously
func (client *Client) GetCrlWithCallback(request *GetCrlRequest, callback func(response *GetCrlResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetCrlResponse
		var err error
		defer close(result)
		response, err = client.GetCrl(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetCrlRequest is the request struct for api GetCrl
type GetCrlRequest struct {
	*requests.RpcRequest
	CertificateAuthorityId string `position:"Query" name:"CertificateAuthorityId"`
}

// GetCrlResponse is the response struct for api GetCrl
type GetCrlResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	ThisUpdate string `json:"ThisUpdate" xml:"ThisUpdate"`
	NextUpdate string `json:"NextUpdate" xml:"NextUpdate"`
	Crl        string `json:"Crl" xml:"Crl"`
}

// CreateGetCrlRequest creates a request to invoke GetCrl API
func CreateGetCrlRequest() (request *GetCrlRequest) {
	request = &GetCrlRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Kms", "2016-01-20", "GetCrl", "kms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateGetCrlResponse creates a response to parse from GetCrl response
func CreateGetCrlResponse() (response *GetCrlResponse) {
	response = &GetCrlResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
