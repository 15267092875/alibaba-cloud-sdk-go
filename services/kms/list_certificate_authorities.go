package kms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListCertificateAuthorities invokes the kms.ListCertificateAuthorities API synchronously
func (client *Client) ListCertificateAuthorities(request *ListCertificateAuthoritiesRequest) (response *ListCertificateAuthoritiesResponse, err error) {
	response = CreateListCertificateAuthoritiesResponse()
	err = client.DoAction(request, response)
	return
}

// ListCertificateAuthoritiesWithChan invokes the kms.ListCertificateAuthorities API asynchronously
func (client *Client) ListCertificateAuthoritiesWithChan(request *ListCertificateAuthoritiesRequest) (<-chan *ListCertificateAuthoritiesResponse, <-chan error) {
	responseChan := make(chan *ListCertificateAuthoritiesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListCertificateAuthorities(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListCertificateAuthoritiesWithCallback invokes the kms.ListCertificateAuthorities API asynchronously
func (client *Client) ListCertificateAuthoritiesWithCallback(request *ListCertificateAuthoritiesRequest, callback func(response *ListCertificateAuthoritiesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListCertificateAuthoritiesResponse
		var err error
		defer close(result)
		response, err = client.ListCertificateAuthorities(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListCertificateAuthoritiesRequest is the request struct for api ListCertificateAuthorities
type ListCertificateAuthoritiesRequest struct {
	*requests.RpcRequest
	PageSize   requests.Integer `position:"Query" name:"PageSize"`
	PageNumber requests.Integer `position:"Query" name:"PageNumber"`
}

// ListCertificateAuthoritiesResponse is the response struct for api ListCertificateAuthorities
type ListCertificateAuthoritiesResponse struct {
	*responses.BaseResponse
	RequestId              string                                             `json:"RequestId" xml:"RequestId"`
	PageNumber             int                                                `json:"PageNumber" xml:"PageNumber"`
	PageSize               int                                                `json:"PageSize" xml:"PageSize"`
	CertificateAuthorities []CertificateAuthorityInListCertificateAuthorities `json:"CertificateAuthorities" xml:"CertificateAuthorities"`
}

// CreateListCertificateAuthoritiesRequest creates a request to invoke ListCertificateAuthorities API
func CreateListCertificateAuthoritiesRequest() (request *ListCertificateAuthoritiesRequest) {
	request = &ListCertificateAuthoritiesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Kms", "2016-01-20", "ListCertificateAuthorities", "kms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListCertificateAuthoritiesResponse creates a response to parse from ListCertificateAuthorities response
func CreateListCertificateAuthoritiesResponse() (response *ListCertificateAuthoritiesResponse) {
	response = &ListCertificateAuthoritiesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
