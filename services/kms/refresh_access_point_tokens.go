package kms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// RefreshAccessPointTokens invokes the kms.RefreshAccessPointTokens API synchronously
func (client *Client) RefreshAccessPointTokens(request *RefreshAccessPointTokensRequest) (response *RefreshAccessPointTokensResponse, err error) {
	response = CreateRefreshAccessPointTokensResponse()
	err = client.DoAction(request, response)
	return
}

// RefreshAccessPointTokensWithChan invokes the kms.RefreshAccessPointTokens API asynchronously
func (client *Client) RefreshAccessPointTokensWithChan(request *RefreshAccessPointTokensRequest) (<-chan *RefreshAccessPointTokensResponse, <-chan error) {
	responseChan := make(chan *RefreshAccessPointTokensResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.RefreshAccessPointTokens(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// RefreshAccessPointTokensWithCallback invokes the kms.RefreshAccessPointTokens API asynchronously
func (client *Client) RefreshAccessPointTokensWithCallback(request *RefreshAccessPointTokensRequest, callback func(response *RefreshAccessPointTokensResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *RefreshAccessPointTokensResponse
		var err error
		defer close(result)
		response, err = client.RefreshAccessPointTokens(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// RefreshAccessPointTokensRequest is the request struct for api RefreshAccessPointTokens
type RefreshAccessPointTokensRequest struct {
	*requests.RpcRequest
	Method          string `position:"Query" name:"Method"`
	AccessPointName string `position:"Query" name:"AccessPointName"`
	AccessToken     string `position:"Query" name:"AccessToken"`
}

// RefreshAccessPointTokensResponse is the response struct for api RefreshAccessPointTokens
type RefreshAccessPointTokensResponse struct {
	*responses.BaseResponse
	RequestId       string `json:"RequestId" xml:"RequestId"`
	AccessPointName string `json:"AccessPointName" xml:"AccessPointName"`
	AccessTokenId   string `json:"AccessTokenId" xml:"AccessTokenId"`
	AccessToken     string `json:"AccessToken" xml:"AccessToken"`
}

// CreateRefreshAccessPointTokensRequest creates a request to invoke RefreshAccessPointTokens API
func CreateRefreshAccessPointTokensRequest() (request *RefreshAccessPointTokensRequest) {
	request = &RefreshAccessPointTokensRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Kms", "2016-01-20", "RefreshAccessPointTokens", "kms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateRefreshAccessPointTokensResponse creates a response to parse from RefreshAccessPointTokens response
func CreateRefreshAccessPointTokensResponse() (response *RefreshAccessPointTokensResponse) {
	response = &RefreshAccessPointTokensResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
