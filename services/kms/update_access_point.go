package kms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// UpdateAccessPoint invokes the kms.UpdateAccessPoint API synchronously
func (client *Client) UpdateAccessPoint(request *UpdateAccessPointRequest) (response *UpdateAccessPointResponse, err error) {
	response = CreateUpdateAccessPointResponse()
	err = client.DoAction(request, response)
	return
}

// UpdateAccessPointWithChan invokes the kms.UpdateAccessPoint API asynchronously
func (client *Client) UpdateAccessPointWithChan(request *UpdateAccessPointRequest) (<-chan *UpdateAccessPointResponse, <-chan error) {
	responseChan := make(chan *UpdateAccessPointResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.UpdateAccessPoint(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// UpdateAccessPointWithCallback invokes the kms.UpdateAccessPoint API asynchronously
func (client *Client) UpdateAccessPointWithCallback(request *UpdateAccessPointRequest, callback func(response *UpdateAccessPointResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *UpdateAccessPointResponse
		var err error
		defer close(result)
		response, err = client.UpdateAccessPoint(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// UpdateAccessPointRequest is the request struct for api UpdateAccessPoint
type UpdateAccessPointRequest struct {
	*requests.RpcRequest
	AuthorizedSecrets string `position:"Query" name:"AuthorizedSecrets"`
	AccessPointName   string `position:"Query" name:"AccessPointName"`
	AclList           string `position:"Query" name:"AclList"`
}

// UpdateAccessPointResponse is the response struct for api UpdateAccessPoint
type UpdateAccessPointResponse struct {
	*responses.BaseResponse
	RequestId       string `json:"RequestId" xml:"RequestId"`
	AccessPointName string `json:"AccessPointName" xml:"AccessPointName"`
}

// CreateUpdateAccessPointRequest creates a request to invoke UpdateAccessPoint API
func CreateUpdateAccessPointRequest() (request *UpdateAccessPointRequest) {
	request = &UpdateAccessPointRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Kms", "2016-01-20", "UpdateAccessPoint", "kms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateUpdateAccessPointResponse creates a response to parse from UpdateAccessPoint response
func CreateUpdateAccessPointResponse() (response *UpdateAccessPointResponse) {
	response = &UpdateAccessPointResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
