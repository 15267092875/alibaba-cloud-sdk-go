package kms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// WhiteBoxAppSecretsCipherKeybox invokes the kms.WhiteBoxAppSecretsCipherKeybox API synchronously
func (client *Client) WhiteBoxAppSecretsCipherKeybox(request *WhiteBoxAppSecretsCipherKeyboxRequest) (response *WhiteBoxAppSecretsCipherKeyboxResponse, err error) {
	response = CreateWhiteBoxAppSecretsCipherKeyboxResponse()
	err = client.DoAction(request, response)
	return
}

// WhiteBoxAppSecretsCipherKeyboxWithChan invokes the kms.WhiteBoxAppSecretsCipherKeybox API asynchronously
func (client *Client) WhiteBoxAppSecretsCipherKeyboxWithChan(request *WhiteBoxAppSecretsCipherKeyboxRequest) (<-chan *WhiteBoxAppSecretsCipherKeyboxResponse, <-chan error) {
	responseChan := make(chan *WhiteBoxAppSecretsCipherKeyboxResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.WhiteBoxAppSecretsCipherKeybox(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// WhiteBoxAppSecretsCipherKeyboxWithCallback invokes the kms.WhiteBoxAppSecretsCipherKeybox API asynchronously
func (client *Client) WhiteBoxAppSecretsCipherKeyboxWithCallback(request *WhiteBoxAppSecretsCipherKeyboxRequest, callback func(response *WhiteBoxAppSecretsCipherKeyboxResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *WhiteBoxAppSecretsCipherKeyboxResponse
		var err error
		defer close(result)
		response, err = client.WhiteBoxAppSecretsCipherKeybox(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// WhiteBoxAppSecretsCipherKeyboxRequest is the request struct for api WhiteBoxAppSecretsCipherKeybox
type WhiteBoxAppSecretsCipherKeyboxRequest struct {
	*requests.RpcRequest
	KeyBox  string `position:"Query" name:"KeyBox"`
	AppName string `position:"Query" name:"AppName"`
	EnvType string `position:"Query" name:"EnvType"`
}

// WhiteBoxAppSecretsCipherKeyboxResponse is the response struct for api WhiteBoxAppSecretsCipherKeybox
type WhiteBoxAppSecretsCipherKeyboxResponse struct {
	*responses.BaseResponse
	RequestId   string `json:"RequestId" xml:"RequestId"`
	WbType      string `json:"WbType" xml:"WbType"`
	WbUpdate    string `json:"WbUpdate" xml:"WbUpdate"`
	ArKeyCipher string `json:"ArKeyCipher" xml:"ArKeyCipher"`
	WbText      string `json:"WbText" xml:"WbText"`
	KeyBoxText  string `json:"KeyBoxText" xml:"KeyBoxText"`
}

// CreateWhiteBoxAppSecretsCipherKeyboxRequest creates a request to invoke WhiteBoxAppSecretsCipherKeybox API
func CreateWhiteBoxAppSecretsCipherKeyboxRequest() (request *WhiteBoxAppSecretsCipherKeyboxRequest) {
	request = &WhiteBoxAppSecretsCipherKeyboxRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Kms", "2016-01-20", "WhiteBoxAppSecretsCipherKeybox", "kms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateWhiteBoxAppSecretsCipherKeyboxResponse creates a response to parse from WhiteBoxAppSecretsCipherKeybox response
func CreateWhiteBoxAppSecretsCipherKeyboxResponse() (response *WhiteBoxAppSecretsCipherKeyboxResponse) {
	response = &WhiteBoxAppSecretsCipherKeyboxResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
