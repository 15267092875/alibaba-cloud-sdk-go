package kms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetWhiteBoxKey invokes the kms.GetWhiteBoxKey API synchronously
func (client *Client) GetWhiteBoxKey(request *GetWhiteBoxKeyRequest) (response *GetWhiteBoxKeyResponse, err error) {
	response = CreateGetWhiteBoxKeyResponse()
	err = client.DoAction(request, response)
	return
}

// GetWhiteBoxKeyWithChan invokes the kms.GetWhiteBoxKey API asynchronously
func (client *Client) GetWhiteBoxKeyWithChan(request *GetWhiteBoxKeyRequest) (<-chan *GetWhiteBoxKeyResponse, <-chan error) {
	responseChan := make(chan *GetWhiteBoxKeyResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetWhiteBoxKey(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetWhiteBoxKeyWithCallback invokes the kms.GetWhiteBoxKey API asynchronously
func (client *Client) GetWhiteBoxKeyWithCallback(request *GetWhiteBoxKeyRequest, callback func(response *GetWhiteBoxKeyResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetWhiteBoxKeyResponse
		var err error
		defer close(result)
		response, err = client.GetWhiteBoxKey(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetWhiteBoxKeyRequest is the request struct for api GetWhiteBoxKey
type GetWhiteBoxKeyRequest struct {
	*requests.RpcRequest
	KeyId string `position:"Query" name:"KeyId"`
}

// GetWhiteBoxKeyResponse is the response struct for api GetWhiteBoxKey
type GetWhiteBoxKeyResponse struct {
	*responses.BaseResponse
	RequestId            string `json:"RequestId" xml:"RequestId"`
	KeyId                string `json:"KeyId" xml:"KeyId"`
	EncryptKeyOssAddress string `json:"EncryptKeyOssAddress" xml:"EncryptKeyOssAddress"`
	DecryptKeyOssAddress string `json:"DecryptKeyOssAddress" xml:"DecryptKeyOssAddress"`
}

// CreateGetWhiteBoxKeyRequest creates a request to invoke GetWhiteBoxKey API
func CreateGetWhiteBoxKeyRequest() (request *GetWhiteBoxKeyRequest) {
	request = &GetWhiteBoxKeyRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Kms", "2016-01-20", "GetWhiteBoxKey", "kms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateGetWhiteBoxKeyResponse creates a response to parse from GetWhiteBoxKey response
func CreateGetWhiteBoxKeyResponse() (response *GetWhiteBoxKeyResponse) {
	response = &GetWhiteBoxKeyResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
