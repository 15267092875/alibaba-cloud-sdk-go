package amptest

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// HuichengTestGrayFourth invokes the amptest.HuichengTestGrayFourth API synchronously
func (client *Client) HuichengTestGrayFourth(request *HuichengTestGrayFourthRequest) (response *HuichengTestGrayFourthResponse, err error) {
	response = CreateHuichengTestGrayFourthResponse()
	err = client.DoAction(request, response)
	return
}

// HuichengTestGrayFourthWithChan invokes the amptest.HuichengTestGrayFourth API asynchronously
func (client *Client) HuichengTestGrayFourthWithChan(request *HuichengTestGrayFourthRequest) (<-chan *HuichengTestGrayFourthResponse, <-chan error) {
	responseChan := make(chan *HuichengTestGrayFourthResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.HuichengTestGrayFourth(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// HuichengTestGrayFourthWithCallback invokes the amptest.HuichengTestGrayFourth API asynchronously
func (client *Client) HuichengTestGrayFourthWithCallback(request *HuichengTestGrayFourthRequest, callback func(response *HuichengTestGrayFourthResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *HuichengTestGrayFourthResponse
		var err error
		defer close(result)
		response, err = client.HuichengTestGrayFourth(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// HuichengTestGrayFourthRequest is the request struct for api HuichengTestGrayFourth
type HuichengTestGrayFourthRequest struct {
	*requests.RpcRequest
	Home HuichengTestGrayFourthHome `position:"Query" name:"Home"  type:"Struct"`
}

// HuichengTestGrayFourthHome is a repeated param struct in HuichengTestGrayFourthRequest
type HuichengTestGrayFourthHome struct {
	Address      HuichengTestGrayFourthHomeAddress             `name:"Address" type:"Struct"`
	T            HuichengTestGrayFourthHomeT                   `name:"T" type:"Struct"`
	PhoneNumbers *[]string                                     `name:"PhoneNumbers" type:"Repeated"`
	DMap         map[string]HuichengTestGrayFourthHomeDMapItem `name:"DMap" type:"Map"`
	NameToAge    map[string]string                             `name:"NameToAge" type:"Map"`
	Locations    *[]HuichengTestGrayFourthHomeLocationsItem    `name:"Locations" type:"Repeated"`
}

// HuichengTestGrayFourthHomeAddress is a repeated param struct in HuichengTestGrayFourthRequest
type HuichengTestGrayFourthHomeAddress struct {
	T        HuichengTestGrayFourthHomeAddressT        `name:"T" type:"Struct"`
	Location HuichengTestGrayFourthHomeAddressLocation `name:"Location" type:"Struct"`
	Detail   string                                    `name:"Detail"`
}

// HuichengTestGrayFourthHomeT is a repeated param struct in HuichengTestGrayFourthRequest
type HuichengTestGrayFourthHomeT struct {
	Class string `name:"Class"`
}

// HuichengTestGrayFourthHomeDMapItem is a repeated param struct in HuichengTestGrayFourthRequest
type HuichengTestGrayFourthHomeDMapItem struct {
	Location HuichengTestGrayFourthHomeDMapItemLocation `name:"Location" type:"Struct"`
	Detail   string                                     `name:"Detail"`
}

// HuichengTestGrayFourthHomeLocationsItem is a repeated param struct in HuichengTestGrayFourthRequest
type HuichengTestGrayFourthHomeLocationsItem struct {
	Late string `name:"Late"`
	Lon  string `name:"Lon"`
}

// HuichengTestGrayFourthHomeAddressT is a repeated param struct in HuichengTestGrayFourthRequest
type HuichengTestGrayFourthHomeAddressT struct {
	Class string `name:"Class"`
}

// HuichengTestGrayFourthHomeAddressLocation is a repeated param struct in HuichengTestGrayFourthRequest
type HuichengTestGrayFourthHomeAddressLocation struct {
	Late string `name:"Late"`
	Lon  string `name:"Lon"`
}

// HuichengTestGrayFourthHomeDMapItemLocation is a repeated param struct in HuichengTestGrayFourthRequest
type HuichengTestGrayFourthHomeDMapItemLocation struct {
	Late string `name:"Late"`
	Lon  string `name:"Lon"`
}

// HuichengTestGrayFourthResponse is the response struct for api HuichengTestGrayFourth
type HuichengTestGrayFourthResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Size      int    `json:"Size" xml:"Size"`
	Value     string `json:"Value" xml:"Value"`
}

// CreateHuichengTestGrayFourthRequest creates a request to invoke HuichengTestGrayFourth API
func CreateHuichengTestGrayFourthRequest() (request *HuichengTestGrayFourthRequest) {
	request = &HuichengTestGrayFourthRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("AmpTest", "2020-12-30", "HuichengTestGrayFourth", "", "")
	request.Method = requests.POST
	return
}

// CreateHuichengTestGrayFourthResponse creates a response to parse from HuichengTestGrayFourth response
func CreateHuichengTestGrayFourthResponse() (response *HuichengTestGrayFourthResponse) {
	response = &HuichengTestGrayFourthResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
