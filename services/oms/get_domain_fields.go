package oms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetDomainFields invokes the oms.GetDomainFields API synchronously
func (client *Client) GetDomainFields(request *GetDomainFieldsRequest) (response *GetDomainFieldsResponse, err error) {
	response = CreateGetDomainFieldsResponse()
	err = client.DoAction(request, response)
	return
}

// GetDomainFieldsWithChan invokes the oms.GetDomainFields API asynchronously
func (client *Client) GetDomainFieldsWithChan(request *GetDomainFieldsRequest) (<-chan *GetDomainFieldsResponse, <-chan error) {
	responseChan := make(chan *GetDomainFieldsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetDomainFields(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetDomainFieldsWithCallback invokes the oms.GetDomainFields API asynchronously
func (client *Client) GetDomainFieldsWithCallback(request *GetDomainFieldsRequest, callback func(response *GetDomainFieldsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetDomainFieldsResponse
		var err error
		defer close(result)
		response, err = client.GetDomainFields(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetDomainFieldsRequest is the request struct for api GetDomainFields
type GetDomainFieldsRequest struct {
	*requests.RpcRequest
	DomainCode string           `position:"Query" name:"DomainCode"`
	UseCache   requests.Boolean `position:"Query" name:"UseCache"`
}

// GetDomainFieldsResponse is the response struct for api GetDomainFields
type GetDomainFieldsResponse struct {
	*responses.BaseResponse
	Data       string `json:"Data" xml:"Data"`
	RequestId  string `json:"RequestId" xml:"RequestId"`
	DomainCode string `json:"DomainCode" xml:"DomainCode"`
}

// CreateGetDomainFieldsRequest creates a request to invoke GetDomainFields API
func CreateGetDomainFieldsRequest() (request *GetDomainFieldsRequest) {
	request = &GetDomainFieldsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Oms", "2019-05-27", "GetDomainFields", "", "")
	request.Method = requests.GET
	return
}

// CreateGetDomainFieldsResponse creates a response to parse from GetDomainFields response
func CreateGetDomainFieldsResponse() (response *GetDomainFieldsResponse) {
	response = &GetDomainFieldsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
