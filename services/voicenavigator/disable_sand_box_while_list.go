package voicenavigator

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DisableSandBoxWhileList invokes the voicenavigator.DisableSandBoxWhileList API synchronously
func (client *Client) DisableSandBoxWhileList(request *DisableSandBoxWhileListRequest) (response *DisableSandBoxWhileListResponse, err error) {
	response = CreateDisableSandBoxWhileListResponse()
	err = client.DoAction(request, response)
	return
}

// DisableSandBoxWhileListWithChan invokes the voicenavigator.DisableSandBoxWhileList API asynchronously
func (client *Client) DisableSandBoxWhileListWithChan(request *DisableSandBoxWhileListRequest) (<-chan *DisableSandBoxWhileListResponse, <-chan error) {
	responseChan := make(chan *DisableSandBoxWhileListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DisableSandBoxWhileList(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DisableSandBoxWhileListWithCallback invokes the voicenavigator.DisableSandBoxWhileList API asynchronously
func (client *Client) DisableSandBoxWhileListWithCallback(request *DisableSandBoxWhileListRequest, callback func(response *DisableSandBoxWhileListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DisableSandBoxWhileListResponse
		var err error
		defer close(result)
		response, err = client.DisableSandBoxWhileList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DisableSandBoxWhileListRequest is the request struct for api DisableSandBoxWhileList
type DisableSandBoxWhileListRequest struct {
	*requests.RpcRequest
	PhoneNumber string `position:"Query" name:"PhoneNumber"`
	InstanceId  string `position:"Query" name:"InstanceId"`
}

// DisableSandBoxWhileListResponse is the response struct for api DisableSandBoxWhileList
type DisableSandBoxWhileListResponse struct {
	*responses.BaseResponse
	Uuid        string `json:"Uuid" xml:"Uuid"`
	RequestId   string `json:"RequestId" xml:"RequestId"`
	PhoneNumber string `json:"PhoneNumber" xml:"PhoneNumber"`
}

// CreateDisableSandBoxWhileListRequest creates a request to invoke DisableSandBoxWhileList API
func CreateDisableSandBoxWhileListRequest() (request *DisableSandBoxWhileListRequest) {
	request = &DisableSandBoxWhileListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("VoiceNavigator", "2018-06-12", "DisableSandBoxWhileList", "voicebot", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDisableSandBoxWhileListResponse creates a response to parse from DisableSandBoxWhileList response
func CreateDisableSandBoxWhileListResponse() (response *DisableSandBoxWhileListResponse) {
	response = &DisableSandBoxWhileListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
