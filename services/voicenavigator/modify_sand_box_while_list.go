package voicenavigator

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ModifySandBoxWhileList invokes the voicenavigator.ModifySandBoxWhileList API synchronously
func (client *Client) ModifySandBoxWhileList(request *ModifySandBoxWhileListRequest) (response *ModifySandBoxWhileListResponse, err error) {
	response = CreateModifySandBoxWhileListResponse()
	err = client.DoAction(request, response)
	return
}

// ModifySandBoxWhileListWithChan invokes the voicenavigator.ModifySandBoxWhileList API asynchronously
func (client *Client) ModifySandBoxWhileListWithChan(request *ModifySandBoxWhileListRequest) (<-chan *ModifySandBoxWhileListResponse, <-chan error) {
	responseChan := make(chan *ModifySandBoxWhileListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ModifySandBoxWhileList(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ModifySandBoxWhileListWithCallback invokes the voicenavigator.ModifySandBoxWhileList API asynchronously
func (client *Client) ModifySandBoxWhileListWithCallback(request *ModifySandBoxWhileListRequest, callback func(response *ModifySandBoxWhileListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ModifySandBoxWhileListResponse
		var err error
		defer close(result)
		response, err = client.ModifySandBoxWhileList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ModifySandBoxWhileListRequest is the request struct for api ModifySandBoxWhileList
type ModifySandBoxWhileListRequest struct {
	*requests.RpcRequest
	PhoneNumber string `position:"Query" name:"PhoneNumber"`
	Description string `position:"Query" name:"Description"`
	Uuid        string `position:"Query" name:"Uuid"`
	InstanceId  string `position:"Query" name:"InstanceId"`
	Name        string `position:"Query" name:"Name"`
}

// ModifySandBoxWhileListResponse is the response struct for api ModifySandBoxWhileList
type ModifySandBoxWhileListResponse struct {
	*responses.BaseResponse
	Uuid        string `json:"Uuid" xml:"Uuid"`
	RequestId   string `json:"RequestId" xml:"RequestId"`
	PhoneNumber string `json:"PhoneNumber" xml:"PhoneNumber"`
}

// CreateModifySandBoxWhileListRequest creates a request to invoke ModifySandBoxWhileList API
func CreateModifySandBoxWhileListRequest() (request *ModifySandBoxWhileListRequest) {
	request = &ModifySandBoxWhileListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("VoiceNavigator", "2018-06-12", "ModifySandBoxWhileList", "voicebot", "openAPI")
	request.Method = requests.POST
	return
}

// CreateModifySandBoxWhileListResponse creates a response to parse from ModifySandBoxWhileList response
func CreateModifySandBoxWhileListResponse() (response *ModifySandBoxWhileListResponse) {
	response = &ModifySandBoxWhileListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
