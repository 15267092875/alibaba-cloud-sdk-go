package ddoscoo

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ConfigDomainAccessMode invokes the ddoscoo.ConfigDomainAccessMode API synchronously
// api document: https://help.aliyun.com/api/ddoscoo/configdomainaccessmode.html
func (client *Client) ConfigDomainAccessMode(request *ConfigDomainAccessModeRequest) (response *ConfigDomainAccessModeResponse, err error) {
	response = CreateConfigDomainAccessModeResponse()
	err = client.DoAction(request, response)
	return
}

// ConfigDomainAccessModeWithChan invokes the ddoscoo.ConfigDomainAccessMode API asynchronously
// api document: https://help.aliyun.com/api/ddoscoo/configdomainaccessmode.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ConfigDomainAccessModeWithChan(request *ConfigDomainAccessModeRequest) (<-chan *ConfigDomainAccessModeResponse, <-chan error) {
	responseChan := make(chan *ConfigDomainAccessModeResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ConfigDomainAccessMode(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ConfigDomainAccessModeWithCallback invokes the ddoscoo.ConfigDomainAccessMode API asynchronously
// api document: https://help.aliyun.com/api/ddoscoo/configdomainaccessmode.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ConfigDomainAccessModeWithCallback(request *ConfigDomainAccessModeRequest, callback func(response *ConfigDomainAccessModeResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ConfigDomainAccessModeResponse
		var err error
		defer close(result)
		response, err = client.ConfigDomainAccessMode(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ConfigDomainAccessModeRequest is the request struct for api ConfigDomainAccessMode
type ConfigDomainAccessModeRequest struct {
	*requests.RpcRequest
	SourceIp   string           `position:"Query" name:"SourceIp"`
	Domain     string           `position:"Query" name:"Domain"`
	AccessMode requests.Integer `position:"Query" name:"AccessMode"`
}

// ConfigDomainAccessModeResponse is the response struct for api ConfigDomainAccessMode
type ConfigDomainAccessModeResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateConfigDomainAccessModeRequest creates a request to invoke ConfigDomainAccessMode API
func CreateConfigDomainAccessModeRequest() (request *ConfigDomainAccessModeRequest) {
	request = &ConfigDomainAccessModeRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ddoscoo", "2017-12-28", "ConfigDomainAccessMode", "ddoscoo", "openAPI")
	return
}

// CreateConfigDomainAccessModeResponse creates a response to parse from ConfigDomainAccessMode response
func CreateConfigDomainAccessModeResponse() (response *ConfigDomainAccessModeResponse) {
	response = &ConfigDomainAccessModeResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
