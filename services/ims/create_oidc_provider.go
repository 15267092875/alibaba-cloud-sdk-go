package ims

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateOIDCProvider invokes the ims.CreateOIDCProvider API synchronously
func (client *Client) CreateOIDCProvider(request *CreateOIDCProviderRequest) (response *CreateOIDCProviderResponse, err error) {
	response = CreateCreateOIDCProviderResponse()
	err = client.DoAction(request, response)
	return
}

// CreateOIDCProviderWithChan invokes the ims.CreateOIDCProvider API asynchronously
func (client *Client) CreateOIDCProviderWithChan(request *CreateOIDCProviderRequest) (<-chan *CreateOIDCProviderResponse, <-chan error) {
	responseChan := make(chan *CreateOIDCProviderResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateOIDCProvider(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateOIDCProviderWithCallback invokes the ims.CreateOIDCProvider API asynchronously
func (client *Client) CreateOIDCProviderWithCallback(request *CreateOIDCProviderRequest, callback func(response *CreateOIDCProviderResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateOIDCProviderResponse
		var err error
		defer close(result)
		response, err = client.CreateOIDCProvider(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateOIDCProviderRequest is the request struct for api CreateOIDCProvider
type CreateOIDCProviderRequest struct {
	*requests.RpcRequest
	IssuanceLimitTime requests.Integer `position:"Query" name:"IssuanceLimitTime"`
	AkProxySuffix     string           `position:"Query" name:"AkProxySuffix"`
	IssuerUrl         string           `position:"Query" name:"IssuerUrl"`
	OIDCProviderName  string           `position:"Query" name:"OIDCProviderName"`
	Description       string           `position:"Query" name:"Description"`
	ClientIds         string           `position:"Query" name:"ClientIds"`
	Fingerprints      string           `position:"Query" name:"Fingerprints"`
}

// CreateOIDCProviderResponse is the response struct for api CreateOIDCProvider
type CreateOIDCProviderResponse struct {
	*responses.BaseResponse
	RequestId    string       `json:"RequestId" xml:"RequestId"`
	OIDCProvider OIDCProvider `json:"OIDCProvider" xml:"OIDCProvider"`
}

// CreateCreateOIDCProviderRequest creates a request to invoke CreateOIDCProvider API
func CreateCreateOIDCProviderRequest() (request *CreateOIDCProviderRequest) {
	request = &CreateOIDCProviderRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ims", "2019-08-15", "CreateOIDCProvider", "ims", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateOIDCProviderResponse creates a response to parse from CreateOIDCProvider response
func CreateCreateOIDCProviderResponse() (response *CreateOIDCProviderResponse) {
	response = &CreateOIDCProviderResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
