package hitsdb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// RenewTSDBInstance invokes the hitsdb.RenewTSDBInstance API synchronously
func (client *Client) RenewTSDBInstance(request *RenewTSDBInstanceRequest) (response *RenewTSDBInstanceResponse, err error) {
	response = CreateRenewTSDBInstanceResponse()
	err = client.DoAction(request, response)
	return
}

// RenewTSDBInstanceWithChan invokes the hitsdb.RenewTSDBInstance API asynchronously
func (client *Client) RenewTSDBInstanceWithChan(request *RenewTSDBInstanceRequest) (<-chan *RenewTSDBInstanceResponse, <-chan error) {
	responseChan := make(chan *RenewTSDBInstanceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.RenewTSDBInstance(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// RenewTSDBInstanceWithCallback invokes the hitsdb.RenewTSDBInstance API asynchronously
func (client *Client) RenewTSDBInstanceWithCallback(request *RenewTSDBInstanceRequest, callback func(response *RenewTSDBInstanceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *RenewTSDBInstanceResponse
		var err error
		defer close(result)
		response, err = client.RenewTSDBInstance(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// RenewTSDBInstanceRequest is the request struct for api RenewTSDBInstance
type RenewTSDBInstanceRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	Duration             requests.Integer `position:"Query" name:"Duration"`
	SecurityToken        string           `position:"Query" name:"SecurityToken"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
	InstanceId           string           `position:"Query" name:"InstanceId"`
	PricingCycle         string           `position:"Query" name:"PricingCycle"`
}

// RenewTSDBInstanceResponse is the response struct for api RenewTSDBInstance
type RenewTSDBInstanceResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	OrderId   int64  `json:"OrderId" xml:"OrderId"`
}

// CreateRenewTSDBInstanceRequest creates a request to invoke RenewTSDBInstance API
func CreateRenewTSDBInstanceRequest() (request *RenewTSDBInstanceRequest) {
	request = &RenewTSDBInstanceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("hitsdb", "2017-06-01", "RenewTSDBInstance", "hitsdb", "openAPI")
	request.Method = requests.POST
	return
}

// CreateRenewTSDBInstanceResponse creates a response to parse from RenewTSDBInstance response
func CreateRenewTSDBInstanceResponse() (response *RenewTSDBInstanceResponse) {
	response = &RenewTSDBInstanceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
