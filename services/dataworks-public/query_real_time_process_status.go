package dataworks_public

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryRealTimeProcessStatus invokes the dataworks_public.QueryRealTimeProcessStatus API synchronously
func (client *Client) QueryRealTimeProcessStatus(request *QueryRealTimeProcessStatusRequest) (response *QueryRealTimeProcessStatusResponse, err error) {
	response = CreateQueryRealTimeProcessStatusResponse()
	err = client.DoAction(request, response)
	return
}

// QueryRealTimeProcessStatusWithChan invokes the dataworks_public.QueryRealTimeProcessStatus API asynchronously
func (client *Client) QueryRealTimeProcessStatusWithChan(request *QueryRealTimeProcessStatusRequest) (<-chan *QueryRealTimeProcessStatusResponse, <-chan error) {
	responseChan := make(chan *QueryRealTimeProcessStatusResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryRealTimeProcessStatus(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryRealTimeProcessStatusWithCallback invokes the dataworks_public.QueryRealTimeProcessStatus API asynchronously
func (client *Client) QueryRealTimeProcessStatusWithCallback(request *QueryRealTimeProcessStatusRequest, callback func(response *QueryRealTimeProcessStatusResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryRealTimeProcessStatusResponse
		var err error
		defer close(result)
		response, err = client.QueryRealTimeProcessStatus(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryRealTimeProcessStatusRequest is the request struct for api QueryRealTimeProcessStatus
type QueryRealTimeProcessStatusRequest struct {
	*requests.RpcRequest
	TaskId string `position:"Query" name:"TaskId"`
}

// QueryRealTimeProcessStatusResponse is the response struct for api QueryRealTimeProcessStatus
type QueryRealTimeProcessStatusResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Message   string `json:"Message" xml:"Message"`
	Code      int    `json:"Code" xml:"Code"`
	Data      Data   `json:"Data" xml:"Data"`
}

// CreateQueryRealTimeProcessStatusRequest creates a request to invoke QueryRealTimeProcessStatus API
func CreateQueryRealTimeProcessStatusRequest() (request *QueryRealTimeProcessStatusRequest) {
	request = &QueryRealTimeProcessStatusRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("dataworks-public", "2018-06-01", "QueryRealTimeProcessStatus", "", "")
	request.Method = requests.POST
	return
}

// CreateQueryRealTimeProcessStatusResponse creates a response to parse from QueryRealTimeProcessStatus response
func CreateQueryRealTimeProcessStatusResponse() (response *QueryRealTimeProcessStatusResponse) {
	response = &QueryRealTimeProcessStatusResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
