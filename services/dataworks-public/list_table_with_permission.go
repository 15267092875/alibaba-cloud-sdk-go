package dataworks_public

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListTableWithPermission invokes the dataworks_public.ListTableWithPermission API synchronously
func (client *Client) ListTableWithPermission(request *ListTableWithPermissionRequest) (response *ListTableWithPermissionResponse, err error) {
	response = CreateListTableWithPermissionResponse()
	err = client.DoAction(request, response)
	return
}

// ListTableWithPermissionWithChan invokes the dataworks_public.ListTableWithPermission API asynchronously
func (client *Client) ListTableWithPermissionWithChan(request *ListTableWithPermissionRequest) (<-chan *ListTableWithPermissionResponse, <-chan error) {
	responseChan := make(chan *ListTableWithPermissionResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListTableWithPermission(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListTableWithPermissionWithCallback invokes the dataworks_public.ListTableWithPermission API asynchronously
func (client *Client) ListTableWithPermissionWithCallback(request *ListTableWithPermissionRequest, callback func(response *ListTableWithPermissionResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListTableWithPermissionResponse
		var err error
		defer close(result)
		response, err = client.ListTableWithPermission(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListTableWithPermissionRequest is the request struct for api ListTableWithPermission
type ListTableWithPermissionRequest struct {
	*requests.RpcRequest
	MaxComputeProjectName string           `position:"Query" name:"MaxComputeProjectName"`
	PageNum               requests.Integer `position:"Query" name:"PageNum"`
	UserId                string           `position:"Query" name:"UserId"`
	PageSize              requests.Integer `position:"Query" name:"PageSize"`
	Keyword               string           `position:"Query" name:"Keyword"`
	WorkspaceId           requests.Integer `position:"Query" name:"WorkspaceId"`
	EngineType            string           `position:"Query" name:"EngineType"`
}

// ListTableWithPermissionResponse is the response struct for api ListTableWithPermission
type ListTableWithPermissionResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Tables    Tables `json:"Tables" xml:"Tables"`
}

// CreateListTableWithPermissionRequest creates a request to invoke ListTableWithPermission API
func CreateListTableWithPermissionRequest() (request *ListTableWithPermissionRequest) {
	request = &ListTableWithPermissionRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("dataworks-public", "2020-05-18", "ListTableWithPermission", "", "")
	request.Method = requests.POST
	return
}

// CreateListTableWithPermissionResponse creates a response to parse from ListTableWithPermission response
func CreateListTableWithPermissionResponse() (response *ListTableWithPermissionResponse) {
	response = &ListTableWithPermissionResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
