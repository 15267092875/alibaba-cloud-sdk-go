package arms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateAlertTemplate invokes the arms.CreateAlertTemplate API synchronously
func (client *Client) CreateAlertTemplate(request *CreateAlertTemplateRequest) (response *CreateAlertTemplateResponse, err error) {
	response = CreateCreateAlertTemplateResponse()
	err = client.DoAction(request, response)
	return
}

// CreateAlertTemplateWithChan invokes the arms.CreateAlertTemplate API asynchronously
func (client *Client) CreateAlertTemplateWithChan(request *CreateAlertTemplateRequest) (<-chan *CreateAlertTemplateResponse, <-chan error) {
	responseChan := make(chan *CreateAlertTemplateResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateAlertTemplate(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateAlertTemplateWithCallback invokes the arms.CreateAlertTemplate API asynchronously
func (client *Client) CreateAlertTemplateWithCallback(request *CreateAlertTemplateRequest, callback func(response *CreateAlertTemplateResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateAlertTemplateResponse
		var err error
		defer close(result)
		response, err = client.CreateAlertTemplate(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateAlertTemplateRequest is the request struct for api CreateAlertTemplate
type CreateAlertTemplateRequest struct {
	*requests.RpcRequest
	TemplateProvider string `position:"Query" name:"TemplateProvider"`
	Annotations      string `position:"Query" name:"Annotations"`
	Rule             string `position:"Query" name:"Rule"`
	ProxyUserId      string `position:"Query" name:"ProxyUserId"`
	Type             string `position:"Query" name:"Type"`
	Message          string `position:"Query" name:"Message"`
	ParentId         string `position:"Query" name:"ParentId"`
	Labels           string `position:"Query" name:"Labels"`
	Name             string `position:"Query" name:"Name"`
	MatchExpressions string `position:"Query" name:"MatchExpressions"`
}

// CreateAlertTemplateResponse is the response struct for api CreateAlertTemplate
type CreateAlertTemplateResponse struct {
	*responses.BaseResponse
	RequestId     string        `json:"RequestId" xml:"RequestId"`
	AlertTemplate AlertTemplate `json:"AlertTemplate" xml:"AlertTemplate"`
}

// CreateCreateAlertTemplateRequest creates a request to invoke CreateAlertTemplate API
func CreateCreateAlertTemplateRequest() (request *CreateAlertTemplateRequest) {
	request = &CreateAlertTemplateRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ARMS", "2021-05-19", "CreateAlertTemplate", "arms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateAlertTemplateResponse creates a response to parse from CreateAlertTemplate response
func CreateCreateAlertTemplateResponse() (response *CreateAlertTemplateResponse) {
	response = &CreateAlertTemplateResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
