package arms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListAlertTemplates invokes the arms.ListAlertTemplates API synchronously
func (client *Client) ListAlertTemplates(request *ListAlertTemplatesRequest) (response *ListAlertTemplatesResponse, err error) {
	response = CreateListAlertTemplatesResponse()
	err = client.DoAction(request, response)
	return
}

// ListAlertTemplatesWithChan invokes the arms.ListAlertTemplates API asynchronously
func (client *Client) ListAlertTemplatesWithChan(request *ListAlertTemplatesRequest) (<-chan *ListAlertTemplatesResponse, <-chan error) {
	responseChan := make(chan *ListAlertTemplatesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListAlertTemplates(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListAlertTemplatesWithCallback invokes the arms.ListAlertTemplates API asynchronously
func (client *Client) ListAlertTemplatesWithCallback(request *ListAlertTemplatesRequest, callback func(response *ListAlertTemplatesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListAlertTemplatesResponse
		var err error
		defer close(result)
		response, err = client.ListAlertTemplates(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListAlertTemplatesRequest is the request struct for api ListAlertTemplates
type ListAlertTemplatesRequest struct {
	*requests.RpcRequest
	AlertProvider    string           `position:"Query" name:"AlertProvider"`
	TemplateProvider string           `position:"Query" name:"TemplateProvider"`
	ProxyUserId      string           `position:"Query" name:"ProxyUserId"`
	Type             string           `position:"Query" name:"Type"`
	Labels           string           `position:"Query" name:"Labels"`
	Name             string           `position:"Query" name:"Name"`
	Status           requests.Boolean `position:"Query" name:"Status"`
}

// ListAlertTemplatesResponse is the response struct for api ListAlertTemplates
type ListAlertTemplatesResponse struct {
	*responses.BaseResponse
	RequestId      string          `json:"RequestId" xml:"RequestId"`
	AlertTemplates []AlertTemplate `json:"AlertTemplates" xml:"AlertTemplates"`
}

// CreateListAlertTemplatesRequest creates a request to invoke ListAlertTemplates API
func CreateListAlertTemplatesRequest() (request *ListAlertTemplatesRequest) {
	request = &ListAlertTemplatesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ARMS", "2021-05-19", "ListAlertTemplates", "arms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListAlertTemplatesResponse creates a response to parse from ListAlertTemplates response
func CreateListAlertTemplatesResponse() (response *ListAlertTemplatesResponse) {
	response = &ListAlertTemplatesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
