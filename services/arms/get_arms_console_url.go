package arms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetArmsConsoleUrl invokes the arms.GetArmsConsoleUrl API synchronously
func (client *Client) GetArmsConsoleUrl(request *GetArmsConsoleUrlRequest) (response *GetArmsConsoleUrlResponse, err error) {
	response = CreateGetArmsConsoleUrlResponse()
	err = client.DoAction(request, response)
	return
}

// GetArmsConsoleUrlWithChan invokes the arms.GetArmsConsoleUrl API asynchronously
func (client *Client) GetArmsConsoleUrlWithChan(request *GetArmsConsoleUrlRequest) (<-chan *GetArmsConsoleUrlResponse, <-chan error) {
	responseChan := make(chan *GetArmsConsoleUrlResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetArmsConsoleUrl(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetArmsConsoleUrlWithCallback invokes the arms.GetArmsConsoleUrl API asynchronously
func (client *Client) GetArmsConsoleUrlWithCallback(request *GetArmsConsoleUrlRequest, callback func(response *GetArmsConsoleUrlResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetArmsConsoleUrlResponse
		var err error
		defer close(result)
		response, err = client.GetArmsConsoleUrl(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetArmsConsoleUrlRequest is the request struct for api GetArmsConsoleUrl
type GetArmsConsoleUrlRequest struct {
	*requests.RpcRequest
}

// GetArmsConsoleUrlResponse is the response struct for api GetArmsConsoleUrl
type GetArmsConsoleUrlResponse struct {
	*responses.BaseResponse
	RequestId      string `json:"RequestId" xml:"RequestId"`
	ArmsConsoleUrl string `json:"ArmsConsoleUrl" xml:"ArmsConsoleUrl"`
}

// CreateGetArmsConsoleUrlRequest creates a request to invoke GetArmsConsoleUrl API
func CreateGetArmsConsoleUrlRequest() (request *GetArmsConsoleUrlRequest) {
	request = &GetArmsConsoleUrlRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ARMS", "2021-05-19", "GetArmsConsoleUrl", "arms", "openAPI")
	request.Method = requests.GET
	return
}

// CreateGetArmsConsoleUrlResponse creates a response to parse from GetArmsConsoleUrl response
func CreateGetArmsConsoleUrlResponse() (response *GetArmsConsoleUrlResponse) {
	response = &GetArmsConsoleUrlResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
