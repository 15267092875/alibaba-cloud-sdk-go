package cdrs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// IntersectTrajectory invokes the cdrs.IntersectTrajectory API synchronously
func (client *Client) IntersectTrajectory(request *IntersectTrajectoryRequest) (response *IntersectTrajectoryResponse, err error) {
	response = CreateIntersectTrajectoryResponse()
	err = client.DoAction(request, response)
	return
}

// IntersectTrajectoryWithChan invokes the cdrs.IntersectTrajectory API asynchronously
func (client *Client) IntersectTrajectoryWithChan(request *IntersectTrajectoryRequest) (<-chan *IntersectTrajectoryResponse, <-chan error) {
	responseChan := make(chan *IntersectTrajectoryResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.IntersectTrajectory(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// IntersectTrajectoryWithCallback invokes the cdrs.IntersectTrajectory API asynchronously
func (client *Client) IntersectTrajectoryWithCallback(request *IntersectTrajectoryRequest, callback func(response *IntersectTrajectoryResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *IntersectTrajectoryResponse
		var err error
		defer close(result)
		response, err = client.IntersectTrajectory(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// IntersectTrajectoryRequest is the request struct for api IntersectTrajectory
type IntersectTrajectoryRequest struct {
	*requests.RpcRequest
	CorpId        string                       `position:"Body" name:"CorpId"`
	EndTime       string                       `position:"Body" name:"EndTime"`
	DeltaDistance requests.Integer             `position:"Body" name:"DeltaDistance"`
	StartTime     string                       `position:"Body" name:"StartTime"`
	DeltaTime     requests.Integer             `position:"Body" name:"DeltaTime"`
	IdList        *[]IntersectTrajectoryIdList `position:"Body" name:"IdList"  type:"Repeated"`
}

// IntersectTrajectoryIdList is a repeated param struct in IntersectTrajectoryRequest
type IntersectTrajectoryIdList struct {
	IdType  string `name:"IdType"`
	IdValue string `name:"IdValue"`
}

// IntersectTrajectoryResponse is the response struct for api IntersectTrajectory
type IntersectTrajectoryResponse struct {
	*responses.BaseResponse
	Code      int    `json:"Code" xml:"Code"`
	Data      string `json:"Data" xml:"Data"`
	Message   string `json:"Message" xml:"Message"`
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
}

// CreateIntersectTrajectoryRequest creates a request to invoke IntersectTrajectory API
func CreateIntersectTrajectoryRequest() (request *IntersectTrajectoryRequest) {
	request = &IntersectTrajectoryRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("CDRS", "2020-11-01", "IntersectTrajectory", "", "")
	request.Method = requests.POST
	return
}

// CreateIntersectTrajectoryResponse creates a response to parse from IntersectTrajectory response
func CreateIntersectTrajectoryResponse() (response *IntersectTrajectoryResponse) {
	response = &IntersectTrajectoryResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
