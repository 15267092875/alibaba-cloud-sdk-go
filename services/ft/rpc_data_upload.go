package ft

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// RpcDataUpload invokes the ft.RpcDataUpload API synchronously
func (client *Client) RpcDataUpload(request *RpcDataUploadRequest) (response *RpcDataUploadResponse, err error) {
	response = CreateRpcDataUploadResponse()
	err = client.DoAction(request, response)
	return
}

// RpcDataUploadWithChan invokes the ft.RpcDataUpload API asynchronously
func (client *Client) RpcDataUploadWithChan(request *RpcDataUploadRequest) (<-chan *RpcDataUploadResponse, <-chan error) {
	responseChan := make(chan *RpcDataUploadResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.RpcDataUpload(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// RpcDataUploadWithCallback invokes the ft.RpcDataUpload API asynchronously
func (client *Client) RpcDataUploadWithCallback(request *RpcDataUploadRequest, callback func(response *RpcDataUploadResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *RpcDataUploadResponse
		var err error
		defer close(result)
		response, err = client.RpcDataUpload(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// RpcDataUploadRequest is the request struct for api RpcDataUpload
type RpcDataUploadRequest struct {
	*requests.RpcRequest
	Query1     string           `position:"Query" name:"query1"`
	Query2     requests.Integer `position:"Query" name:"query2"`
	LargeParam string           `position:"Body" name:"largeParam"`
}

// RpcDataUploadResponse is the response struct for api RpcDataUpload
type RpcDataUploadResponse struct {
	*responses.BaseResponse
	RequestId  string                 `json:"RequestId" xml:"RequestId"`
	Url        string                 `json:"url" xml:"url"`
	TotalBytes int64                  `json:"totalBytes" xml:"totalBytes"`
	TotalTime  int64                  `json:"totalTime" xml:"totalTime"`
	Speed      string                 `json:"speed" xml:"speed"`
	Params     map[string]interface{} `json:"params" xml:"params"`
	Headers    map[string]interface{} `json:"headers" xml:"headers"`
}

// CreateRpcDataUploadRequest creates a request to invoke RpcDataUpload API
func CreateRpcDataUploadRequest() (request *RpcDataUploadRequest) {
	request = &RpcDataUploadRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ft", "2021-01-01", "RpcDataUpload", "", "")
	request.Method = requests.POST
	return
}

// CreateRpcDataUploadResponse creates a response to parse from RpcDataUpload response
func CreateRpcDataUploadResponse() (response *RpcDataUploadResponse) {
	response = &RpcDataUploadResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
