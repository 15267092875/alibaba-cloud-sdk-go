package cdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// TestDescribeDomainBpsData invokes the cdn.TestDescribeDomainBpsData API synchronously
func (client *Client) TestDescribeDomainBpsData(request *TestDescribeDomainBpsDataRequest) (response *TestDescribeDomainBpsDataResponse, err error) {
	response = CreateTestDescribeDomainBpsDataResponse()
	err = client.DoAction(request, response)
	return
}

// TestDescribeDomainBpsDataWithChan invokes the cdn.TestDescribeDomainBpsData API asynchronously
func (client *Client) TestDescribeDomainBpsDataWithChan(request *TestDescribeDomainBpsDataRequest) (<-chan *TestDescribeDomainBpsDataResponse, <-chan error) {
	responseChan := make(chan *TestDescribeDomainBpsDataResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.TestDescribeDomainBpsData(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// TestDescribeDomainBpsDataWithCallback invokes the cdn.TestDescribeDomainBpsData API asynchronously
func (client *Client) TestDescribeDomainBpsDataWithCallback(request *TestDescribeDomainBpsDataRequest, callback func(response *TestDescribeDomainBpsDataResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *TestDescribeDomainBpsDataResponse
		var err error
		defer close(result)
		response, err = client.TestDescribeDomainBpsData(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// TestDescribeDomainBpsDataRequest is the request struct for api TestDescribeDomainBpsData
type TestDescribeDomainBpsDataRequest struct {
	*requests.RpcRequest
	DomainType     string `position:"Query" name:"DomainType"`
	TimeMerge      string `position:"Query" name:"TimeMerge"`
	DomainName     string `position:"Query" name:"DomainName"`
	EndTime        string `position:"Query" name:"EndTime"`
	Interval       string `position:"Query" name:"Interval"`
	LocationNameEn string `position:"Query" name:"LocationNameEn"`
	StartTime      string `position:"Query" name:"StartTime"`
	IspNameEn      string `position:"Query" name:"IspNameEn"`
}

// TestDescribeDomainBpsDataResponse is the response struct for api TestDescribeDomainBpsData
type TestDescribeDomainBpsDataResponse struct {
	*responses.BaseResponse
	EndTime            string                                        `json:"EndTime" xml:"EndTime"`
	StartTime          string                                        `json:"StartTime" xml:"StartTime"`
	IspNameEn          string                                        `json:"IspNameEn" xml:"IspNameEn"`
	RequestId          string                                        `json:"RequestId" xml:"RequestId"`
	LocationNameEn     string                                        `json:"LocationNameEn" xml:"LocationNameEn"`
	LocationName       string                                        `json:"LocationName" xml:"LocationName"`
	IspName            string                                        `json:"IspName" xml:"IspName"`
	DomainName         string                                        `json:"DomainName" xml:"DomainName"`
	DataInterval       string                                        `json:"DataInterval" xml:"DataInterval"`
	BpsDataPerInterval BpsDataPerIntervalInTestDescribeDomainBpsData `json:"BpsDataPerInterval" xml:"BpsDataPerInterval"`
}

// CreateTestDescribeDomainBpsDataRequest creates a request to invoke TestDescribeDomainBpsData API
func CreateTestDescribeDomainBpsDataRequest() (request *TestDescribeDomainBpsDataRequest) {
	request = &TestDescribeDomainBpsDataRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cdn", "2014-11-11", "TestDescribeDomainBpsData", "", "")
	request.Method = requests.POST
	return
}

// CreateTestDescribeDomainBpsDataResponse creates a response to parse from TestDescribeDomainBpsData response
func CreateTestDescribeDomainBpsDataResponse() (response *TestDescribeDomainBpsDataResponse) {
	response = &TestDescribeDomainBpsDataResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
